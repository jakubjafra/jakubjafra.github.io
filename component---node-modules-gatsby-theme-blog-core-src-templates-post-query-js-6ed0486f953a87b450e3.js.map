{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack:///./node_modules/@babel/runtime/helpers/construct.js","webpack:///./src/gatsby-theme-blog/components/post-title.jsx","webpack:///./src/gatsby-theme-blog/components/post-prev-next.jsx","webpack:///./src/gatsby-theme-blog/components/post-hero.jsx","webpack:///./src/gatsby-theme-blog/components/post.jsx","webpack:///./node_modules/gatsby-theme-blog/src/gatsby-theme-blog-core/components/post.js","webpack:///./node_modules/gatsby-theme-blog-core/src/templates/post-query.js"],"names":["MDXRenderer","require","module","exports","TypeError","iter","Symbol","iterator","Object","Array","from","arrayLikeToArray","arr","isArray","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_setPrototypeOf","o","p","setPrototypeOf","__proto__","len","length","i","arr2","React","mdx","useMDXScope","scope","children","props","mdxScope","End","fullScope","keys","values","key","fn","minLen","n","prototype","toString","call","slice","constructor","name","test","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","_construct","Parent","args","Class","a","push","apply","instance","Function","bind","arguments","PostTitle","h1","sx","mt","mb","PrevNextPost","previous","next","css","as","flexWrap","justifyContent","listStyle","padding","Link","to","slug","rel","title","PostHero","post","image","childImageSharp","fluid","alt","imageAlt","excerpt","Post","data","site","siteMetadata","location","description","imageSource","socialImage","src","date","body","PostWrapper","blogPost","query","PostPage"],"mappings":"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","file":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js-6ed0486f953a87b450e3.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","/** @jsx jsx */\nimport { Styled, jsx } from 'theme-ui';\n\nconst PostTitle = (props) => <Styled.h1 sx={{ mt: 0, mb: 1 }} {...props} />;\n\nexport default PostTitle;\n","/** @jsx jsx */\nimport { Link } from 'gatsby';\nimport { jsx, css, Styled, Flex } from 'theme-ui';\n\nconst PrevNextPost = ({ previous, next }) => (\n  <div\n    css={css({\n      mt: 5,\n      mb: 3,\n    })}\n  >\n    {(previous || next) && (\n      <Flex\n        as=\"ul\"\n        css={css({\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        })}\n      >\n        <li>\n          {previous && (\n            <Styled.a as={Link} to={previous.slug} rel=\"prev\">\n              ← {previous.title}\n            </Styled.a>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Styled.a as={Link} to={next.slug} rel=\"next\">\n              {next.title} →\n            </Styled.a>\n          )}\n        </li>\n      </Flex>\n    )}\n  </div>\n);\n\nexport default PrevNextPost;\n","/** @jsx jsx */\nimport { Fragment } from 'react';\nimport { jsx } from 'theme-ui';\nimport Image from 'gatsby-image';\n\nconst PostHero = ({ post }) => (\n  <Fragment>\n    {post?.image?.childImageSharp && (\n      <Image\n        fluid={post.image.childImageSharp.fluid}\n        alt={post.imageAlt ? post.imageAlt : post.excerpt}\n        sx={{\n          mt: 2,\n          mb: 2,\n        }}\n      />\n    )}\n  </Fragment>\n);\n\nexport default PostHero;\n","/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\n\nimport Layout from './layout';\nimport SEO from './seo';\nimport PostTitle from './post-title';\nimport PostDate from './post-date';\nimport PrevNextPost from './post-prev-next';\nimport PostHero from './post-hero';\n\nconst Post = ({\n  data: {\n    post,\n    site: {\n      siteMetadata: { title },\n    },\n  },\n  location,\n  previous,\n  next,\n}) => (\n  <Layout location={location} title={title}>\n    <SEO\n      title={post.title}\n      description={post.excerpt}\n      imageSource={\n        post.socialImage\n          ? post.socialImage?.childImageSharp?.fluid.src\n          : post.image?.childImageSharp?.fluid.src\n      }\n      imageAlt={post.imageAlt}\n    />\n    <main>\n      <article>\n        <header>\n          <PostTitle>{post.title}</PostTitle>\n          <PostDate>{post.date}</PostDate>\n          <PostHero post={post} />\n        </header>\n        <section>\n          <MDXRenderer>{post.body}</MDXRenderer>\n        </section>\n      </article>\n    </main>\n    <PrevNextPost {...{ previous, next }} />\n  </Layout>\n);\n\nexport default Post;\n","import React from \"react\"\nimport Post from \"../../components/post\"\n\nconst PostWrapper = ({ location, data }) => {\n  const { blogPost, previous, next } = data\n\n  return (\n    <Post\n      data={{ ...data, post: blogPost }}\n      location={location}\n      previous={previous}\n      next={next}\n    />\n  )\n}\n\nexport default PostWrapper\n","import { graphql } from \"gatsby\"\nimport PostPage from \"../components/post\"\n\nexport default PostPage\n\nexport const query = graphql`\n  query PostPageQuery(\n    $id: String!\n    $previousId: String\n    $nextId: String\n    $maxWidth: Int\n  ) {\n    site {\n      siteMetadata {\n        title\n        social {\n          name\n          url\n        }\n      }\n    }\n    blogPost(id: { eq: $id }) {\n      id\n      excerpt\n      body\n      slug\n      title\n      tags\n      date(formatString: \"MMMM DD, YYYY\")\n      image {\n        childImageSharp {\n          fluid(maxWidth: $maxWidth) {\n            ...GatsbyImageSharpFluid\n            src\n          }\n        }\n      }\n      imageAlt\n      socialImage {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n            src\n          }\n        }\n      }\n    }\n    previous: blogPost(id: { eq: $previousId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n    next: blogPost(id: { eq: $nextId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n`\n"],"sourceRoot":""}